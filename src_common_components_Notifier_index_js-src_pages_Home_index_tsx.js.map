{"version":3,"file":"src_common_components_Notifier_index_js-src_pages_Home_index_tsx.js","mappings":";;;;;AAiBA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AAUA;;;;;;AAOA","sources":["webpack://@solflare/extension/./src/common/components/Notifier/withNotifier.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.withNotifier = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst material_1 = require(\"@mui/material\");\nconst material_2 = require(\"@mui/material\");\nconst react_1 = __importDefault(require(\"react\"));\nconst FullMessageModal_1 = __importDefault(require(\"./FullMessageModal\"));\nconst NotifierContainer = (0, material_2.styled)(material_1.Box) `\n  position: fixed;\n  top: 63px;\n  width: 100%;\n  z-index: 20000;\n`;\nconst MessageContainer = (0, material_2.styled)(material_1.Box) `\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  cursor: pointer;\n  top: 50%;\n  left: 50%;\n  max-width: calc(100% - 32px);\n  transform: translate(-50%, -50%);\n  &:before {\n    content: '';\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: -1;\n    border-radius: 19px;\n    background: #131519;\n  }\n`;\nconst MessageChip = (0, material_2.styled)(material_1.Box) `\n  border: 1px solid transparent;\n  border-radius: 19px;\n  padding: 2px 8px;\n  white-space: nowrap;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: center;\n`;\nconst GradientProgress = (0, material_2.styled)(material_1.LinearProgress) `\n  background: rgba(245, 252, 255, 0.1);\n  height: 1px;\n  & .MuiLinearProgress-bar {\n    background: linear-gradient(90deg, #3dd28b 0%, rgba(61, 210, 139, 0) 88.53%);\n  }\n`;\nconst colorByVariant = {\n    success: 'success.main',\n    error: 'error.main',\n    info: 'info.main',\n    warning: 'warning.main'\n};\nconst backgroundByVariant = {\n    success: 'black',\n    error: 'black',\n    info: 'black',\n    warning: 'blackd'\n};\n// TODO - copied some logic from Notistack code to make API relatively similar. We should refactor this and make it better\nconst withNotifier = (Component) => {\n    class RiseNotifierComponent extends react_1.default.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                notification: null,\n                showNotification: false,\n                snack: null,\n                loading: false,\n                showFullMessage: false,\n                showFullMessageData: null\n            };\n            this.enqueueSnackbar = (message, opts) => {\n                const { key, messageShort, ...options } = opts;\n                if (options.loading === true) {\n                    this.removeSnackbar();\n                    this.setState({ loading: true, notification: null });\n                    return;\n                }\n                this.setState({ notification: null, loading: false });\n                clearTimeout(this.timeout);\n                const id = key ?? new Date().getTime() + Math.random();\n                const snack = {\n                    key: id,\n                    ...options,\n                    message: messageShort ?? message,\n                    messageOriginal: message,\n                    open: true,\n                    entered: false,\n                    requestClose: false,\n                    variant: options.variant ?? 'info',\n                    autoHideDuration: options.autoHideDuration ?? 50000,\n                    onExited: options?.onExited\n                };\n                if (options.persist) {\n                    snack.autoHideDuration = undefined;\n                }\n                this.setState({ notification: snack, showNotification: true });\n                this.timeout = setTimeout(() => this.closeSnackbar(), snack.autoHideDuration);\n                return id;\n            };\n            this.closeSnackbar = () => {\n                this.setState({ showNotification: false });\n            };\n            this.removeSnackbar = () => {\n                this.setState({ notification: null, showNotification: false });\n            };\n            this.handleMessageClick = () => {\n                const { notification } = this.state;\n                if (notification?.onClick) {\n                    notification.onClick();\n                }\n                else {\n                    this.closeSnackbar();\n                    this.setState({\n                        showFullMessage: true,\n                        showFullMessageData: notification\n                    });\n                }\n            };\n            this.renderFixedProgress = (variant) => {\n                return ((0, jsx_runtime_1.jsx)(material_1.LinearProgress, { variant: 'determinate', value: 100, sx: {\n                        height: '1px',\n                        backgroundColor: colorByVariant[variant] ?? 'transparent',\n                        variant,\n                        '& .MuiLinearProgress-bar': {\n                            backgroundColor: colorByVariant[variant] ?? 'transparent'\n                        }\n                    } }));\n            };\n            this.renderNotification = () => {\n                const { notification, loading, showNotification, showFullMessageData } = this.state;\n                return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(NotifierContainer, { children: [loading && (0, jsx_runtime_1.jsx)(GradientProgress, {}), (0, jsx_runtime_1.jsx)(material_1.Zoom, { in: showNotification, timeout: 500, children: (0, jsx_runtime_1.jsx)(material_1.Box, { children: this.renderFixedProgress(notification?.variant) }) }), (0, jsx_runtime_1.jsx)(material_1.Fade, { in: showNotification, timeout: 500, mountOnEnter: true, unmountOnExit: true, children: (0, jsx_runtime_1.jsx)(material_1.Box, { children: notification?.message && ((0, jsx_runtime_1.jsx)(MessageContainer, { onClick: this.handleMessageClick, children: (0, jsx_runtime_1.jsx)(MessageChip, { sx: {\n                                                    borderColor: colorByVariant[notification?.variant],\n                                                    backgroundColor: backgroundByVariant[notification?.variant]\n                                                }, children: (0, jsx_runtime_1.jsx)(material_1.Typography, { variant: 'label', sx: {\n                                                        fontWeight: 600,\n                                                        textAlign: 'center',\n                                                        lineHeight: '18px',\n                                                        color: 'white'\n                                                    }, children: notification?.message }) }) })) }) })] }), this.state.showFullMessage && ((0, jsx_runtime_1.jsx)(FullMessageModal_1.default, { notification: showFullMessageData, onClose: () => this.setState({ showFullMessage: false }) }))] }));\n            };\n        }\n        componentWillUnmount() {\n            clearTimeout(this.timeout);\n        }\n        render() {\n            return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [this.renderNotification(), (0, jsx_runtime_1.jsx)(Component, { ...this.props, enqueueSnackbar: this.enqueueSnackbar, closeSnackbar: this.closeSnackbar, removeSnackbar: this.removeSnackbar })] }));\n        }\n    }\n    return RiseNotifierComponent;\n};\nexports.withNotifier = withNotifier;\n"],"names":[],"sourceRoot":""}